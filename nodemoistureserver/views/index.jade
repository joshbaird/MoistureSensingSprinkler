extends layout

block content
  h1= title
  p Welcome to Need based sprinkler system.

  #wrapper
    #sensorInfo
        h2 Sensor Info
        p
            strong ID:
            |  <span id='sensorInfoId'></span>
            br
            strong Type:
            |  <span id='sensorInfoType'></span>
            br
            strong PinID:
            |  <span id='sensorInfoPinId'></span>
            br
            strong TurnOnTime:
            |  <span id='sensorInfoTurnOnTime'></span>
            br
            strong TurnOffTime:
            |  <span id='sensorInfoTurnOffTime'></span>
            br
            strong TurnOnMoisture:
            |  <span id='sensorInfoTurnOnMoisture'></span>
            br
            strong TurnOffMoisture:
            |  <span id='sensorInfoTurnOffMoisture'></span>
            br
            strong MoistureHistory:
            |  <span id='sensorInfoMoistureHistory'></span>
            br
            strong TurnOnLight:
            |  <span id='sensorInfoTurnOnLight'></span>
            br
            strong TurnOffLight:
            |  <span id='sensorInfoTurnOffLight'></span>
            br
            strong LightHistory:
            |  <span id='sensorInfoLightHistory'></span>
            br
            strong TurnOnTemp:
            |  <span id='sensorInfoTurnOnTemp'></span>
            br
            strong TurnOffTemp:
            |  <span id='sensorInfoTurnOffTemp'></span>
            br
            strong TempHistory:
            |  <span id='sensorInfoTempHistory'></span>
    // /Sensor Info

    h2 Sensor List
    #sensorList
      table
        thead
          th ID
          th Type
          th PinID
          th Delete?
        tbody
      // /Sensor List

    h2 Add Sensor
    #addSensor
        fieldset(style='border: none;')
          div(class='genericOptionInput', id='first')
            input#inputSensorId(type='text', class='form-control', placeholder='SensorID')
            input#inputSensorType(type='text', class='form-control', placeholder='SensorType')
            input#inputPinId(type='text', class='form-control', placeholder='PinId')
          div(class='genericOptionInput', id='second')
            
            input#inputTurnOnMoisture(type='text', class='doubleInput form-control', placeholder='TurnOnMoisture')
            input#inputTurnOffMoisture(type='text', class='doubleInput form-control', placeholder='TurnOffMoisture')
          div(class='genericOptionInput', id='third')
            
            input#inputTurnOnLight(type='text', class='doubleInput form-control', placeholder='TurnOnLight')
            input#inputTurnOffLight(type='text', class='doubleInput form-control', placeholder='TurnOffLight')
          div(class='genericOptionInput', id='fourth')
            
            input#inputTurnOnTemp(type='text', class='doubleInput form-control', placeholder='TurnOnTemp')
            input#inputTurnOffTemp(type='text', class='doubleInput form-control', placeholder='TurnOffTemp')
            
          
          div#inputTempKnobs(style="display: none; width: 100%; float: left;")
              div(class='demo' style='font-size: 35px; float: left')
                pre.preKnob
                input(id='knobTurnOnTemp' class='knob' data-angleOffset='-125' data-angleArc='250' data-fgColor='#66EE66' data-rotation='clockwise' value='35' style='font-size: 35px;')
              div(class='demo' style='font-size: 35px; float: left')
                pre.preKnob
                input(id='knobTurnOffTemp' class='knob' data-angleOffset='-125' data-angleArc='250' data-fgColor='#66EE66' data-rotation='clockwise' value='35' style='font-size: 35px;')
          
          div(style='width: 100%;')
            div(class='genericOptionInput' style="width: 20%; display: block;")
                input(id='inputDateStart', type='text', class='date start form-control doubleInput', placeholder='Start Date', style='float: left; position: relative; ')
                div(class='input-group clockpicker doubleInput', data-placement='right', data-align='top', data-autoclose='true', style='float: left')
                  input(id='inputTimeStart', type='text', class='clockPickerInput form-control', placeholder='Start Time', style='position: relative; ')
                  span(class='input-group-addon')
                    span(class="glyphicon glyphicon-time")
          div(style='width: 100%; display: inline-block;')
            div(class='genericOptionInput' style="width: 20%; display: inline-block;")
                input(id='inputDateEnd', type='text', class='date start form-control doubleInput', placeholder='End Date', style='float: left; position: relative; ')
                div(class='input-group clockpicker doubleInput', data-placement='right', data-align='top', data-autoclose='true', style='float: left')
                  input(id='inputTimeEnd', type='text', class='clockPickerInput form-control', placeholder='End Time', style='position: relative; ')
                  span(class='input-group-addon')
                    span(class="glyphicon glyphicon-time")
                br         
                button#btnAddSensor(style='margin-top: 20px; width: 100%') Add Sensor

block scriptology
  script(type="text/javascript").
    var config; // Configuration from the db
    var sensorListData = [];
    var validator;

    // Setup Shit for THIS page here.
    $(document).ready(function(){
      // DOM ready
        $.getJSON('/sensors/sensorconfig', function(data) {
          config = data[0];
        });

         // Set up some ui stuff
         setUpPickers(); // Sets up pickers for the ui
         validator = setUpValidation();  // Setup up validation objects
         populateTable();

         // Setup Events and listeners
         $('#sensorList table tbody').on('click', 'td a.linkshowsensor', showSensorInfo);
         $('#btnAddSensor').on('click', addSensor);
         $('#sensorList table tbody').on('click', 'td a.linkdeletesensor', deleteSensor);
         $.each($('input[type="text"]'), function(index, element){
           $(element).on('input', validator.inputChange);
           $(element).on('blur', validator.inputChange);
        });
    }); // End $(document).ready()

    function setUpPickers(){
      console.log("Set up pickers");

      var datepickersOpt = {
          // dateFormat: 'dd-mm-yy',
          minDate: 0,
          'format': 'm/d/yyyy',
          'autoclose': true
        };
      $('.date').datepicker($.extend({
        onSelect: function() {
          var minDate = $(this).datepicker('getDate');
          minDate.setDate(minDate.getDate() + 2); //add two days
          $("#to_date").datepicker("option", "minDate", minDate);
        },
        beforeShow: function() {
          setTimeout(function(){
              $('.ui-datepicker').css('z-index', 99999999999999);
          }, 0);
        }
      }, datepickersOpt));
      $('.clockPickerInput').clockpicker({
        autoclose: false,
        twelvehour: true,
        placement: 'bottom',
        default: 'now',
        donetext: 'SET',
      });
    }

    function setUpValidation(){
      var constraints = {
        'inputSensorId'       : /^[\w\d-]+$/i,  // One or more word chars, digits, or -
        'inputSensorType'     : /^[\w\d-]+$/i,
        'inputPinId'          : /^[\d]{1,2}$/,  // 1 or 2 digits
        'inputTurnOnMoisture' : /^0*[\d]{1,2}$|^0$|^100$/,
        'inputTurnOffMoisture': /^0*[\d]{1,2}$|^0$|^100$/,
        'inputTurnOnLight'    : /^0*[\d]{1,2}$|^0$|^100$/,
        'inputTurnOffLight'   : /^0*[\d]{1,2}$|^0$|^100$/,
        'inputTurnOnTemp'     : /^0*([\d]{1,2}|0|100)\s?F°$/i,
        'inputTurnOffTemp'    : /^0*([\d]{1,2}|0|100)\s?F°$/i,
        'inputDateStart'      : /^[\d]{1,2}\/[\d]{1,2}\/[\d]{4}$/,
        'inputTimeStart'      : /^[\d]{1,2}:[\d]{2}\s?(am|pm)$/i,
        'inputDateEnd'        : /^[\d]{1,2}\/[\d]{1,2}\/[\d]{4}$/,
        'inputTimeEnd'        : /^[\d]{1,2}:[\d]{2}\s?(am|pm)$/i,
      };
      var colors = {
        'valid' : "lime",
        'invalid' : "IndianRed"
      };
      return new SimpleValidator(constraints, colors);
    }

    function populateTable() {
      // Empty content string
      var tableContent = '';
      sensorListData = [];
      // jQuery AJAX call for JSON
      $.getJSON('/sensors/sensorlist', function(data) {
        // Stick our sensor data array into a sensorlist variable in the global object
        $.each(data, function(index, element){
          sensorListData.push(new Sensor(element, config));
        });
        // For each item in our JSON, add a table row and cells to the content string
        $.each(sensorListData, function(index, s) {
          tableContent += '<tr>';
          tableContent += '<td><a href="#" class="linkshowsensor" rel="' + s.getSensorId() + '">' + s.getSensorId() + '</a></td>';
          tableContent += '<td>' + s.getSensorType() + '</td>';
          tableContent += '<td>' + s.getPinId() + '</td>';
          tableContent += '<td><a href="#" class="linkdeletesensor" rel="' + s._id + '">delete</a></td>';
          tableContent += '</tr>';
        });

        // Inject the whole content string into our existing HTML table
        $('#sensorList table tbody').html(tableContent);
      });
    }

    function addSensor(event) {
      event.preventDefault();

      // Test to see if the inputs are valid
      if(!validator.testInputs()['valid']){
        alert('Please Correct Fields Highlighted in red');
        return;
      }

      var errorCount = 0;
      $('#addSensor input').each(function(index, val) {
        if ($(this).val() === '') {
          errorCount++;
        }
      });

      //To get epoch we take values of two fields '04/23/2015' and 11:45PM and form in to string:
      //'04/23/2015, 11:45PM'
      //We let date.js do the rest, aka Date.parse(string) -> datestring
      //and use the native js function Date(datestring).getTime() to give us epoch
      startEpoch = new Date(Date.parse($('#addSensor fieldset input#inputDateStart').val() + ", " + $('#addSensor fieldset input#inputTimeStart').val())).getTime();

      console.log("Start epoch: " + startEpoch);
      endEpoch = new Date(Date.parse($('#addSensor fieldset input#inputDateEnd').val() + ", " + $('#addSensor fieldset input#inputTimeEnd').val())).getTime();
      console.log("End epoch: " + endEpoch);

      //some basic error checking is never a bad thing...
      if ((endEpoch <= startEpoch) || (startEpoch == null) || (endEpoch == null)) {
        console.log("bad times...");
      }

      // check errorCount is 0
      //turn on debug at top if you don't want to fill in all fields
      if (errorCount === 0 || debug) {
        var sensorObj = new Sensor({}, config);
        sensorObj.setSensorId($('#addSensor fieldset input#inputSensorId').val());
        sensorObj.setSensorType($('#addSensor fieldset input#inputSensorType').val());
        sensorObj.setPinId($('#addSensor fieldset input#inputPinId').val());
        sensorObj.setTurnOnTime(startEpoch);
        sensorObj.setTurnOffTime(endEpoch);
        sensorObj.setTurnOnMoisture($('#addSensor fieldset input#inputTurnOnMoisture').val());
        sensorObj.setTurnOffMoisture($('#addSensor fieldset input#inputTurnOffMoisture').val());
        sensorObj.setTurnOnLight($('#addSensor fieldset input#inputTurnOnLight').val());
        sensorObj.setTurnOffLight($('#addSensor fieldset input#inputTurnOffLight').val());
        sensorObj.setTurnOnTemp($('#addSensor fieldset input#inputTurnOnTemp').val().replace(' F' + '\xB0', '').replace(' C' + '\xB0', ''));
        sensorObj.setTurnOffTemp($('#addSensor fieldset input#inputTurnOffTemp').val().replace(' F' + '\xB0', '').replace(' C' + '\xB0', ''));     
        var sensorJSON = sensorObj.getJSONData();
        // Send the json data to mongodb
        $.ajax({
          type: 'POST',
          data: sensorJSON,
          url: '/sensors/addsensor',
          dataType: 'JSON'
        }).done(function(response) {
          if (response.msg === '') {
            $('#addSensor fieldset input').val('');
            populateTable();
          } else {
            alert('Error: ' + response.msg);
          }
        });
      } else {
        alert('Please fill in all fields.');
        return false;
      }
    }

    function deleteSensor(event) {
      event.preventDefault();

      // Pop up a confirmation dialog
      var confirmation = confirm('Are you sure you want to delete this sensor?');

      // Check and make sure the user confirmed
      if (confirmation === true) {
        // If they did, do our delete
        $.ajax({
          type: 'DELETE',
          url: '/sensors/deletesensor/' + $(this).attr('rel')
        }).done(function(response) {
          // Check for a successful (blank) response
          if (response.msg === '') {} else {
            alert('Error: ' + response.msg);
          }
          // Update the table
          populateTable();

        });
      }
      else {
        // If they said no to the confirm, do nothing
        return false;
      }
    }

    function showSensorInfo(event) {

      // Prevent Link from Firing
      event.preventDefault();

      // Retrieve Address from link rel attribute
      var thisSensorId = $(this).attr('rel');

      // Get Index of object based on id value
      var arrayPosition = sensorListData.map(function(arrayItem) {
        return arrayItem.sensorId;
      }).indexOf(thisSensorId);
      // Get our Sensor Object
      var thisSensorObject = sensorListData[arrayPosition];

      //Populate Info Box
      $('#sensorInfoId').text(thisSensorObject.sensorId);
      $('#sensorInfoType').text(thisSensorObject.sensorType);
      $('#sensorInfoPinId').text(thisSensorObject.pinId);
      $('#sensorInfoTurnOnTime').text(new Date(parseInt(thisSensorObject.turnOnTime)));
      $('#sensorInfoTurnOffTime').text(new Date(parseInt(thisSensorObject.turnOffTime)));
      $('#sensorInfoTurnOnMoisture').text(thisSensorObject.getTurnOnMoisture());
      $('#sensorInfoTurnOffMoisture').text(thisSensorObject.getTurnOffMoisture());
      if ("moistureHistory" in thisSensorObject){
        $('#sensorInfoMoistureHistory').text(JSON.stringify(thisSensorObject.getCurrentMoisture()));
      }
      else
      {
        $('#sensorInfoMoistureHistory').text("");
      }
      $('#sensorInfoTurnOnLight').text(thisSensorObject.getTurnOnLight());
      $('#sensorInfoTurnOffLight').text(thisSensorObject.getTurnOffLight());
      if ("lightHistory" in thisSensorObject){
        $('#sensorInfoLightHistory').text(JSON.stringify(thisSensorObject.getCurrentLight()));
      }
      else{
        $('#sensorInfoLightHistory').text("");
      }
      $('#sensorInfoTurnOnTemp').text(thisSensorObject.getTurnOffLight());
      $('#sensorInfoTurnOffTemp').text(thisSensorObject.getTurnOffLight());
      if ("tempHistory" in thisSensorObject){
        $('#sensorInfoTempHistory').text(JSON.stringify(thisSensorObject.getCurrentTemp()));
      }
      else{
        $('#sensorInfoTempHistory').text("");
      }
    }
